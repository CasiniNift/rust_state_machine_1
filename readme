Make the runtime more generic
The  goal is to always make the runtime more generic and configurable over the types we use in our Pallets.

Why Generic?
The flexibility of generic runtime means that we can write code which works for multiple different configurations and types.

Truthfully, the advantage of generic types will not be super obvious in this project, but when building a blockchain SDK like the Substrate, this kind of flexibility will allow ecosystem developers to reach their full potential.

For example, teams have used Substrate to build fully compatible Ethereum blockchains, while other teams have experimented with cutting edge cryptographic primitives. This generic framework allows both teams to be successful.

Macros:
Rust macros are basically code which can generate more code.

As you can see from our simple state machine, there is a lot of boiler plate code that we could generate, following the simple patterns and structures we have designed.

For example:
- We expect that each Pallet will expose some callable functions with Call.
- We know that each Call will have all the same parameters of the underlying Pallet function, except the caller.
- We know that each Pallet will implement Dispatch logic on the Pallet struct.
- We know that the Runtime will accumulate all the pallet::Calls into the RuntimeCall outer enum.
- We know that the Runtime will have logic to re-dispatch runtime level calls to the pallet level.
- and so on...

The more we abstract our Pallet and Runtime into consistent and and extensible pieces, the more we can automate, and ultimately this can provide a better developer experience.






